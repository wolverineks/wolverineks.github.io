---
layout: post
title:  "Functional Programming"
date:   2016-01-21 08:40:52 -0800
categories: jekyll update
---

In computer programming there are many programming paradigms. A programming paradigm is like a style of programming. Each programming paradigm has strengths and weaknesses. One such paradigm is Functional Programming.

[Functional Programming][functional], as its name implies, focuses on constructing functions. These functions give the same output for the same input, each and every time. Unlike Ruby, they have no side effects, and they are never destructive.

Here are some of the many functional programming languages:

* [Charity][charity]
* [Clean][clean]
* [Coq][coq]
* [Elm][elm]
* [Frege][frege]
* [Haskell][haskell]
* [Hope][hope]
* [Mercury][mercury]
* [Miranda][miranda]
* [Idris][idris]
* [Sequence][sequencel]

# Primary Features
Some of the primary features of functional programming are higher order functions, immutable data, monads, referential transparency, lazy evaluation, and recursion.

**Higher Order Functions** are functions that take other functions as their arguments. Higher order functions can be simulated by closures, however, higher order functions are less verbose than closures.

**Immutable Data** means that data is supplied to the functions as a copy of the original data. Data is never altered by a function.

**Monads** are a beast to understand. It appears that in functional programming, monads can be used to simulate the mutation of data. A monad may allow this by stringing all the steps needed to get the desired data change together, and executing them on the copied data, each time you want to access the changed data. This is just a guess. Don't shoot me...

**Referential Transparency** means that a variable, once assigned a value, can never be assigned to a different value. This allows you to refer to that variable at any time, and be assured you will be accessing the original value, and not a value that has been changed in some other place in the code.

**Lazy Evaluation** means that the arguments passed into a function are not evaluated, unless they are required to be evaluated in order to evaluate the function. For instance, if a function is evaluating the length of an array, it does not need to evaluate any of the elements of the array to determine its length. However, if the output of the function is dependent on the evaluation of some of the elements, then the elements will be evaluated.

**Recursion** is the primary method of iterating in a functional style language. Recursion is when a function calls itself, drilling deeper into the data until a base vase is reached, at which point the function can finally evaluate.

[functional]: https://en.wikipedia.org/wiki/Functional_programming
[charity]: https://en.wikipedia.org/wiki/Charity_%28programming_language%29
[clean]: https://en.wikipedia.org/wiki/Clean_%28programming_language%29
[coq]: https://en.wikipedia.org/wiki/Coq
[curry]: https://en.wikipedia.org/wiki/Curry_%28programming_language%29
[elm]: https://en.wikipedia.org/wiki/Elm_%28programming_language%29
[frege]: https://en.wikipedia.org/wiki/Frege_%28programming_language%29
[haskell]: https://en.wikipedia.org/wiki/Haskell_%28programming_language%29
[hope]: https://en.wikipedia.org/wiki/Hope_%28programming_language%29
[mercury]: https://en.wikipedia.org/wiki/Mercury_%28programming_language%29
[miranda]: https://en.wikipedia.org/wiki/Miranda_%28programming_language%29
[idris]: https://en.wikipedia.org/wiki/Idris_%28programming_language%29
[sequencel]: https://en.wikipedia.org/wiki/SequenceL
